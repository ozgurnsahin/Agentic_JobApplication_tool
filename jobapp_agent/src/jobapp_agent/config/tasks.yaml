research_task:
  description: >
    STEP 1 - ANALYZE CV FIRST:
    Use the PDFSearchTool to analyze Özgür's CV and extract key information before starting job search.

    Extract the following information from the CV:
    - Current technical skills and programming languages 
    - Recent work experience and technologies used
    - AI/ML expertise and tools (OpenAI, LangChain, etc.)
    - Data engineering technologies (PostgreSQL, MongoDB, etc.)
    - Location preferences and experience level
    
    Use queries like:
    - "extract complete work experience section including all companies positions dates responsibilities technologies achievements metrics"
    - "extract complete technical skills section programming languages technologies frameworks libraries applications tools"
    - "extract complete projects section with all project names descriptions technologies tech stacks github links achievements"
    - "extract education background certifications courses degrees university details"
    Generalize the queries according to users CV.
        
    STEP 2 - CREATE PERSONALIZED SEARCH QUERIES:
    Based on the CV analysis, create 3-4 targeted job search queries that match 
    Özgür's actual skills and experience. Focus on the most relevant technologies found in the CV.
    
    STEP 3 - SEARCH FOR JOBS:
    Use SerperDevTool to search for AI/ML, Data Engineering, 
    and Data Science job opportunities. ONLY 2-3 times maximum with targeted queries:
    
    Search Criteria:
    - Job platforms: LinkedIn, Kariyer.net, Glassdoor, Indeed Turkey
    - Location: Turkey (especially Istanbul)
    - Company size: 30+ employees
    - Job posting age: Last 24 hours only 
    - Job types: Remote, Hybrid, On-site

    Search queries like:
    - "\"Data Scientist\" OR "\"AI Engineer\" OR "\"ML Engineer\" OR "\"Data Engineer\"  OR \"Machine Learning Engineer\" (junior OR mid OR senior OR lead) -manager -director site:linkedin.com Turkey"
    - "\"Data Scientist\" OR "\"AI Engineer\" OR "\"Data Engineer\" OR \"Python Developer\" (junior OR mid-level OR senior OR lead) -manager -director site:kariyer.net Istanbul"
    - "\"Data Scientist\" OR "\"AI Engineer\" OR "\"Backend Developer\" OR "\"Data Engineer\"  OR \"AI Developer\" (mid OR senior OR lead) -manager -director site:glassdoor.com Turkey"
    - "\"Data Scientist\" OR "\"AI Engineer\" OR "\"Full Stack Developer\" OR "\"Data Engineer\"  (junior OR senior OR lead) -manager -director site:indeed.com Turkey"
    
    For each job found, extract:
    - Job title and company name
    - Location and work type (remote/hybrid/onsite)
    - Salary information (if available)
    - Job description summary
    - Key requirements and technologies mentioned
    - Experience level required
    - Direct URL to job posting
    - Date when job was found

    REJECT any job posting from 2023 or earlier years.
    REJECT any job titles orpostions other than given positions.
    REJECT any platforms other than the LinkedIn, Kariyer.net, Glassdoor, Indeed Turkey.
    Focus on quality over quantity - return only jobs that genuinely match 
    the skills extracted from Özgür's CV.

    STEP 4 - SAVE TO DATABASE:
    MANDATORY: After collecting all job data, you MUST use the job_database_tool with action="save_jobs" 
    to save all found jobs to the database before providing final output.
    Format the jobs as a JSON array with fields: title, company, link, description.
    
    Example job_database_tool call:
    {"action": "save_jobs", "jobs_list": [{"title": "Data Engineer", "company": "Company", "link": "https://...", "description": "..."}]}
    
    Only after successfully saving jobs to database, provide the final output.

  expected_output: >
    FIRST: Save all jobs to database using job_database_tool
    THEN: Provide a structured JSON report containing:
    - List of relevant job opportunities with complete details:
      * title, company, location, salary
      * description summary
      * job posting URL and date found
    
    IMPORTANT: Format the jobs as a simple JSON array like this:
    [
      {
        "title": "AI Engineer",
        "company": "Tech Company",
        "link": "https://example.com/job",
        "description": "Job description here",
        "position": 1
      },
      {
        "title": "Data Scientist", 
        "company": "Another Company",
        "link": "https://example.com/job2",
        "description": "Another job description",
        "position": 2
      }
    ]
    
    Do NOT include metadata or nested structures - just the clean job array.
    
    Minimum 10 jobs, maximum 15 high-quality matches.
    Each job entry must include all required fields.

  agent: researcher

optimization_task:
  description: >
    STEP 1 - GET UNPROCESSED JOBS:
    Query the database for jobs where is_processed = FALSE using PGSearchTool.
    
    STEP 2 - PARSE JOB REQUIREMENTS:
    For each job, analyze the description and extract:
    - Required technical skills (Python, JavaScript, etc.)
    - Frameworks/libraries mentioned (FastAPI, LangChain, etc.)
    - Databases (PostgreSQL, MongoDB, etc.)
    - Experience level required
    - Key industry terms and buzzwords
    
    STEP 3 - ANALYZE ÖZGÜR'S CV:
    Use FileReadTool to read Özgür's complete CV content and understand
    all his skills, experience, and projects.

    STEP 4 - CALCULATE MATCH SCORE:
    Create a matching score (0-100) using this formula:
    
    Required Skills Match:
    - Count how many REQUIRED skills from job description Özgür actually has
    - Required Skills Score = (Özgür's Required Skills / Total Required Skills) × 60
    
    Preferred Skills Match:
    - Count how many PREFERRED skills Özgür has  
    - Preferred Skills Score = (Özgür's Preferred Skills / Total Preferred Skills) × 25
    
    Experience Level Match:
    - Does Özgür's experience level match job requirements?
    - Experience Score = 15 if match, 10 if close, 0 if far off
    
    Final Score = Required Skills Score + Preferred Skills Score + Experience Score
    
    Example:
    Job wants: Python, FastAPI, PostgreSQL (required) + Docker, AWS (preferred)
    Özgür has: Python, FastAPI, PostgreSQL, Docker
    Score = (3/3 × 60) + (1/2 × 25) + 15 = 60 + 12.5 + 15 = 87.5 → 88
    
    IMPORTANT: Match score must be in 0-100 range

    STEP 5 - CREATE TAILORED CV:
    Generate an optimized CV that:
    - Emphasizes skills that match job requirements
    - Reorders experience to highlight relevant projects
    - Uses job-specific keywords naturally
    - Maintains the same format as original CV
    - NEVER adds skills Özgür doesn't have
    
    STEP 6 - SAVE TO DATABASE:
    Save the optimized CV as PDF bytes to optimized_cvs table with match score using save_cv_and_mark_processed action
    
    STEP 7 - MARK AS PROCESSED:
    Update jobs table: is_processed = TRUE for completed jobs.

  expected_output: >
    A report showing:
    - Number of jobs processed
    - Match scores for each CV created
    - Skills emphasized for each job
    - Any jobs skipped and why

  agent: optimizer